{"name":"googleDriveAccess","tagline":"googleDriveAccess.py is a Python tool to Access to the Google Drive and upload and download ( import and export ) Google Apps Script source codes","body":"googleDriveAccess\r\n=================\r\n\r\na Python tool to Access to the Google Drive\r\n\r\n\r\nSample\r\n------\r\n\r\n``` python\r\n\r\nimport os\r\nimport googleDriveAccess\r\n\r\n# create instance\r\nda = googleDriveAccess.DAClient(os.path.abspath('.'))\r\n\r\n# create parent folders at the same time\r\nfolderId, folderPath = da.makeDirs('/remote_drive/subfolder_test/subsubfolder')\r\nprint folderId, folderPath\r\n\r\n# recursive backup to remote folder\r\nda.recursiveUpload('a_local_directory_you_want_to_backup_recursively')\r\n\r\n```\r\n\r\n\r\nHow to use it\r\n-------------\r\n\r\n- pip install 'google-api-python-client'\r\n\r\n- pip install googleDriveAccess\r\n\r\n- cd /opt/googleDriveAccess\r\n\r\n- register your App on https://console.developers.google.com/project and *'download JSON'* of your Client ID and Client secret\r\n\r\n- rename this JSON file to './client_secret_[Client ID].json'\r\n\r\n- create './cicache.txt' file and write your Client ID to the first line.\r\n\r\n- execute ./encrypt_client_secret.py to encrypt downloaded JSON file\r\n\r\n- check that encrypted file exists './client_secret_[Client ID].json.enc' and plain text JSON file './client_secret_[Client ID].json' will be deleted\r\n\r\n- execute ./test_upload_first.py to test OAuth2 flow and store credentials\r\n\r\n- execute ./test_upload_second.py to test OAuth2 using stored credentials\r\n\r\n- execute ./test_script_prefetch.py to test Drive API search with query\r\n\r\n- edit test_script_import_export.py (set 'mode = 0') to test create new Google Apps Script 'test_GoogleAppsScript_createCalendarEvent' for tests below\r\n\r\n- execute test_script_import_export.py to test create and *'get SCRIPT_ID'*\r\n\r\n- edit test_script_import_export.py (set 'mode = 2' and *'set SCRIPT_ID'*) to test download\r\n\r\n- execute test_script_import_export.py to test download\r\n\r\n- edit downloaded script './script_import_export/test_GoogleAppsScript_createCalendarEvent/Code.gs'\r\n\r\n- edit test_script_import_export.py (set 'mode = 1') to test upload\r\n\r\n- execute test_script_import_export.py to test upload\r\n\r\n\r\nKnown BUGs\r\n----------\r\n\r\nWhen uploading a file that would not be automaticaly handled Google Drive,\r\n\"Media type 'None' is not supported. Valid media types: [*/*]\"\r\nerror occurred.\r\nBecause of default mimeType is set to None on uploadFile.\r\nSo it may correct to catch the exception and retry with 'binary/octet-stream'.\r\n\r\n\r\nThis program will cache each folder (or file) ids\r\nassigned by the Google Drive (into the cache file cache_folderIds.sl3) .\r\nPlease search and erase a row that has same id from the cache file\r\nwhen you delete your folder or file using another Google Drive client tool.\r\n\r\n\r\n(I will make refresh_cache.py)\r\n\r\n\r\nLinks\r\n-----\r\n\r\nYou can get the latest version at this GitHub repository.\r\nhttps://github.com/HatsuneMiku/googleDriveAccess\r\n\r\nGitHub HomePage http://hatsunemiku.github.io/googleDriveAccess\r\n\r\nPyPI https://pypi.python.org/pypi/googleDriveAccess\r\n\r\n\r\nLicense\r\n-------\r\n\r\nBSD License\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}