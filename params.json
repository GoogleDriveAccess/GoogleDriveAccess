{"name":"googleDriveAccess","tagline":"googleDriveAccess.py is a Python tool to Access to the Google Drive and upload and download ( import and export ) Google Apps Script source codes","body":"googleDriveAccess\r\n=================\r\n\r\na Python tool to Access to the Google Drive\r\n\r\nPackage Documentation https://github.com/HatsuneMiku/googleDriveAccess/wiki\r\n\r\n\r\nSample\r\n------\r\n\r\n``` python\r\nimport os\r\nimport googleDriveAccess\r\n\r\n# create instance\r\nda = googleDriveAccess.DAClient(os.path.abspath('.'))\r\n\r\n# create parent folders at the same time\r\nfolderId, folderPath = da.makeDirs('/remote_drive/subfolder_test/subsubfolder')\r\nprint folderId, folderPath\r\n\r\n# recursive backup to remote folder\r\nda.recursiveUpload('a_local_directory_you_want_to_backup_recursively')\r\n\r\n# search\r\nda.execQuery(\"explicitlyTrashed=True\")\r\nda.execQuery(\"'root' in parents\", **{'maxResults': 5})\r\nda.execQuery(\"'root' in parents and explicitlyTrashed=True\", repeattoken=True, **{'maxResults': 500})\r\n```\r\n\r\n\r\nHow to use it\r\n-------------\r\n\r\nInstall\r\n\r\n``` bash\r\npip install 'google-api-python-client'\r\npip install googleDriveAccess\r\n  (or easy_install googleDriveAccess)\r\ncd /opt/googleDriveAccess\r\n```\r\n\r\n\r\nFirst, create your Client_ID and secret on the Google Drive.\r\n\r\nRegister your App on https://console.developers.google.com/project\r\nand *'download JSON'* of your Client ID and Client secret.\r\n\r\nRename this JSON file to './client_secret_[Client ID].json' .\r\n\r\n``` bash\r\nmv client_secrets.json /opt/googleDriveAccess/client_secret_YOURCLIENTID.json\r\n```\r\n\r\n\r\nSecond, create cache file for Client ID .\r\n\r\nCreate './cicache.txt' file and write your Client ID to the first line.\r\n\r\n``` bash\r\necho YOURCLIENTID > ./cicache.txt\r\n```\r\n\r\n\r\nThird, encrypt secret file.\r\n\r\nExecute ./encrypt_client_secret.py to encrypt downloaded JSON file.\r\n\r\n``` bash\r\n./encrypt_client_secret.py\r\n```\r\n\r\n\r\nCheck that encrypted file exists './client_secret_[Client ID].json.enc'\r\nand plain text JSON file './client_secret_[Client ID].json' will be deleted.\r\n\r\nExecute ./test_upload_first.py to test OAuth2 flow and store credentials.\r\n\r\n``` bash\r\n./test_upload_first.py\r\n```\r\n\r\n\r\nExecute ./test_upload_second.py to test OAuth2 using stored credentials.\r\n\r\n``` bash\r\n./test_upload_second.py\r\n```\r\n\r\n\r\nExecute ./test_script_prefetch.py to test Drive API search with query.\r\n\r\n``` bash\r\n./test_script_prefetch.py\r\n```\r\n\r\n\r\nEdit test_script_import_export.py (set 'mode = 0')\r\nto test create new Google Apps Script\r\n'test_GoogleAppsScript_createCalendarEvent' for tests below.\r\n\r\nExecute ./test_script_import_export.py to test create and *'get SCRIPT_ID'* .\r\n\r\n``` bash\r\n./test_script_import_export.py\r\n```\r\n\r\n\r\nEdit test_script_import_export.py (set 'mode = 2' and *'set SCRIPT_ID'*)\r\nto test download.\r\n\r\nExecute ./test_script_import_export.py to test download.\r\n\r\n``` bash\r\n./test_script_import_export.py\r\n```\r\n\r\n\r\nEdit downloaded script\r\n'./script_import_export/test_GoogleAppsScript_createCalendarEvent/Code.gs' .\r\n\r\nEdit test_script_import_export.py (set 'mode = 1') to test upload.\r\n\r\nExecute ./test_script_import_export.py to test upload.\r\n\r\n``` bash\r\n./test_script_import_export.py\r\n```\r\n\r\n\r\nKnown BUGs\r\n----------\r\n\r\nI will make refresh_cache.py :\r\n\r\n```\r\nThis program will cache each folder (or file) ids assigned by the Google Drive.\r\n(Into the cache file cache_folderIds_[Client ID].sl3 .)\r\nPlease search and erase a row that has same id from the cache file\r\nwhen you delete your folder or file using another Google Drive client tool.\r\n```\r\n\r\n\r\nIt may be fixed:\r\n\r\n```\r\nWhen uploading a file that would not be automaticaly handled Google Drive,\r\n\"Media type 'None' is not supported. Valid media types: [*/*]\"\r\nerror occurred.\r\nBecause of default mimeType is set to None on uploadFile.\r\nSo it may correct to catch the exception and retry with 'binary/octet-stream'.\r\n```\r\n\r\n\r\nLinks\r\n-----\r\n\r\nPackage Documentation https://github.com/HatsuneMiku/googleDriveAccess/wiki\r\n\r\nYou can get the latest version at this GitHub repository.\r\nhttps://github.com/HatsuneMiku/googleDriveAccess\r\n\r\nGitHub HomePage http://hatsunemiku.github.io/googleDriveAccess\r\n\r\nPyPI https://pypi.python.org/pypi/googleDriveAccess\r\n\r\n\r\nLicense\r\n-------\r\n\r\nBSD License\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}